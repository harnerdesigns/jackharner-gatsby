{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/blog/gutenberg-selectcontrol-not-saving-attributes/",
    "result": {"data":{"markdownRemark":{"html":"<h2>SetAttributes() Doesn't Automatically Convert Types</h2>\n<p>I was using a SelectControl to set a Category ID for a specific Gutenberg block I was building. Turns out the <code class=\"language-text\">setAttribute()</code> function doesn't automatically convert types. The SelectControl returns the value as a string, &#x26; since the attribute was expecting a Number:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token literal-property property\">attributes</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">cat1</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The attribute wasn't getting saved as anything.</p>\n<h2>A Few Solutions</h2>\n<p>The easiest way to solve this is just convert the String value to a Number with <code class=\"language-text\">parseInt()</code> when setting the Attribute:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onChangeCat1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">cat1</span><span class=\"token operator\">:</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Other than that you can adjust your attribute type to just accept a string, however given that WordPress expects Post IDs to be Numbers this probably isn't the best solution:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token literal-property property\">attributes</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">cat1</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Conclusion</h2>\n<p>Make sure you're saving your attributes as the appropriate type, (Number, String, Boolean, etc.) and WordPress Gutenberg should stop giving you issues. Hit me up on Twitter <a href=\"https://twitter.com/jackharner\">@JackHarner</a> if you have any other WordPress related questions.</p>","excerpt":"SetAttributes() Doesn't Automatically Convert Types I was using a SelectControl to set a Category ID for a specific Gutenberg block I was building…","wordCount":{"words":143},"frontmatter":{"date":"March 15, 2022","updated":null,"title":"SelectControl Not Saving Attributes","subtitle":"Troubleshooting and Fixing A Custom Gutenberg Block","tags":["WordPress"],"featuredImage":{"absolutePath":"/home/runner/work/jackharner-gatsby/jackharner-gatsby/content/blog/gutenberg-selectcontrol-not-saving-attributes/featuredImage.png","childImageSharp":{"original":{"src":"/static/featuredImage-af0bb5be96a29883f616acee4e8a72c7.png"}}},"ogImage":{"absolutePath":"/home/runner/work/jackharner-gatsby/jackharner-gatsby/content/blog/gutenberg-selectcontrol-not-saving-attributes/featuredImage.png","childImageSharp":{"original":{"src":"/static/featuredImage-af0bb5be96a29883f616acee4e8a72c7.png"}}}},"fields":{"externalLink":"","externalLinkLabel":"Check It Out »","slug":"/blog/gutenberg-selectcontrol-not-saving-attributes/","ogImage":"./featuredImage.png","date":"March 15, 2022","unlisted":false}}},"pageContext":{"slug":"/blog/gutenberg-selectcontrol-not-saving-attributes/","related":[{"id":"cd2ef220-3a1a-5963-8ca0-b83675d04188","excerpt":"NPM (Node Package Manager) and Yarn are both JavaScript based package managers for ease of installing 3rd Party Tools & Libraries into your…","fields":{"date":"2020-01-19T18:32:31.115Z","slug":"/blog/yarn-vs-npm/","collection":"blog","published":true,"externalLink":"","externalLinkLabel":"Check It Out »"},"frontmatter":{"title":"Yarn vs. NPM","subtitle":"PACKAGE MANAGER THROWDOWN","tags":["Node"],"published":true,"featuredImage":{"childImageSharp":{"resize":{"src":"/static/c9bf9e79ce9ffd0feaf00bb3905b52cf/5ff92/featuredImage.jpg"}}}}},{"id":"ee6a0850-85a6-5b5d-be2b-45cf8a38acd1","excerpt":"Have you ever had to stay up till midnight to flip over to a new BigCommerce theme with banners and content for a big sale (Black Friday…","fields":{"date":"2022-11-22T05:34:40.692Z","slug":"/blog/date-specific-content-bigcommerce/","collection":"blog","published":true,"externalLink":"","externalLinkLabel":"Check It Out »"},"frontmatter":{"title":"Displaying Content Between Specific Dates On BigCommerce","subtitle":"Using the Moment Handlebars Helper","tags":["BigCommerce","Automation"],"published":true,"featuredImage":{"childImageSharp":{"resize":{"src":"/static/a7096f4d66a98ed59ef6a9543329cc4e/5ff92/lucian-alexe-f2xfTOv0p9Y-unsplash.jpg"}}}}},{"id":"a6459bb1-f9aa-5d13-9b4f-b9dc789b2665","excerpt":"Don't be a T-Shaped Developer Be a T H I C C Developer Instead!  What's A T-Shaped Developer? The idea of a T-Shaped Dev has been around…","fields":{"date":"2021-04-10T17:07:45.666Z","slug":"/blog/be-a-thicc-developer/","collection":"blog","published":true,"externalLink":"","externalLinkLabel":"Check It Out »"},"frontmatter":{"title":"Be A T H I C C Developer","subtitle":"Why 'Wide or Deep' when you can 'Wide AND Deep'?","tags":["Newsletter","Career","Automation"],"published":true,"featuredImage":{"childImageSharp":{"resize":{"src":"/static/a2d68234f68f69b3186a2966b8c78e89/f969e/featuredImage.png"}}}}},{"id":"7a366d18-c441-50e6-99ff-ca44a93a8c1e","excerpt":"Have you ever had a JavaScript object that you needed to extract a bunch of different values out of? Today I'd like to introduce you to your…","fields":{"date":"2020-10-18T16:47:36.345Z","slug":"/blog/destructuring-and-nested-destructuring-in-es6/","collection":"blog","published":true,"externalLink":"","externalLinkLabel":"Check It Out »"},"frontmatter":{"title":"Destructuring and Nested Destructuring in ES6","subtitle":"","tags":["JavaScript","Newsletter"],"published":true,"featuredImage":{"childImageSharp":{"resize":{"src":"/static/aeec27123ae5c68737ebbccf0ee1c21b/5ff92/ricardo-gomez-angel-j5gCOKZdm6I-unsplash.jpg"}}}}}]}},
    "staticQueryHashes": ["3649515864","764694655"]}