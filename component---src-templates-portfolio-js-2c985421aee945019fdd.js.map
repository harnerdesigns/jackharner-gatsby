{"version":3,"file":"component---src-templates-portfolio-js-2c985421aee945019fdd.js","mappings":"sKAKMA,EAAIC,EAAQ,MAmDlB,IAhDgB,SAAC,GAAgF,IAAD,IAA7EC,QAAAA,OAA6E,MAAnE,GAAmE,MAA/DC,SAAAA,OAA+D,MAApD,KAAoD,MAA9CC,KAAAA,OAA8C,aAAhCC,QAAAA,OAAgC,MAAtB,KAAsB,MAAhBC,MAAAA,OAAgB,MAAR,EAAQ,EAExFC,EACS,cAAbJ,EACI,CAAEK,OAAQ,UAAWC,OAAQ,WAAYC,KAAM,WAC/C,CAAEF,OAAQ,OAAQC,OAAQ,OAAQC,KAAM,QAQ9C,OALe,MAAXL,GAAmBH,EAAQS,QAAQN,IAAY,GAAKH,EAAQU,OAAOV,EAAQS,QAAQN,GAAU,GAM/F,uBAAKQ,UAAU,YACb,0BACCT,GACD,sBAAIS,UAAU,aACZ,gBAAC,EAAAC,KAAD,CAAMC,GAAE,IAAMZ,EAAYa,MAAO,CAAEC,OAAQ,mBAC3C,gBAAC,IAAD,CAAiBC,YAAU,EAACC,KAAK,eADjC,WAGWZ,EAAeE,SAEzBP,GAAWA,EAAQkB,KAAI,SAACC,EAAKC,GAC5B,IAAMC,EAAmB,cAARF,EAAA,IAA0BlB,EAA1B,uBAA4DA,EAA5D,SAA6EH,EAAEwB,UAAUH,GAAzF,IACjB,OAAIC,EAAIhB,GAASe,IAAQhB,EAErB,sBAAIQ,UAAU,UAAUY,IAAKH,GAC3B,gBAAC,EAAAR,KAAD,CAAMC,GAAIQ,GACR,gBAAC,IAAD,CAAiBL,YAAU,EAACC,KAAMO,EAAAA,EAASL,KACpBA,IAIhB,IAChB,IACD,sBAAIR,UAAU,aAEZ,gBAAC,EAAAC,KAAD,CAAMC,GAAE,IAAMZ,EAAN,SACN,gBAAC,IAAD,CAAiBe,YAAU,EAACC,KAAK,eAChCZ,EAAeC,OAFlB,WAQT,C,+CC3BD,IAhBkB,SAAC,GAAiC,IAA/BmB,EAA8B,EAA9BA,SAA8B,IAApBC,SAAAA,OAAoB,MAAT,GAAS,EAEjD,OACE,0BAAQf,UAAU,wBAChB,gBAAC,IAAD,CAAOgB,MAAM,QAAQC,MAAI,IAEzB,0BAAKH,GACJC,GAAY,0BAAKA,GAGvB,C,oICrBD,EAAe,IAA0B,gEC6CzC,EAlCa,SAAC,GAA2B,IAAzBG,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YACLC,EAAUF,EAAKG,kBAAtBC,MAEFC,EAAOJ,EAAY9B,QAErBA,EAAUmC,OAAOC,KAAKF,GAAMG,MAAK,SAASC,EAAGC,GAC/C,OAAOL,EAAKI,GAAKJ,EAAKK,EACvB,IAED,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CACEC,MAAK,eAAiBxC,EAAQ,GAAzB,KAAgCA,EAAQ,GAAxC,KAA+CA,EAAQ,GAAvD,YACLyC,YAAW,gFACXC,MAAOC,IAET,gBAAC,IAAD,CAAWjB,SAAS,mGAApB,aACA,2BAASf,UAAU,cACjB,gBAAC,IAAD,CAASX,QAASA,EAASC,SAAS,eAEtC,wBAAMU,UAAU,6BAEd,uBAAKA,UAAU,YACZoB,EACEa,QAAO,SAAAC,GAAI,MAAoC,cAAhCA,EAAKC,KAAKC,OAAOC,UAArB,IACXJ,QAAO,SAAAC,GAAI,OAAIA,EAAKC,KAAKG,YAAYT,MAAMU,OAAS,CAAzC,IACXhC,KAAI,WAAiBiC,GAAW,IAAnBN,EAAkB,EAAxBC,KACN,OAAO,gBAAC,IAAD,CAAaD,KAAMA,EAAMM,MAAOA,GACxC,MAKZ,C","sources":["webpack://jackharner-gatsby/./src/components/common/topTags.js","webpack://jackharner-gatsby/./src/components/pageTitle.js","webpack://jackharner-gatsby/./src/images/portfolio-ogImage.png","webpack://jackharner-gatsby/./src/templates/portfolio.js"],"sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport tagIcons from \"../../templates/tags/tag-icons\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nconst _ = require(\"lodash\")\n\n\nconst TopTags = ({ topTags = [], postType = null, back = false, exclude = null, limit = 6 }) => {\n\n  const postTypeLabels =\n    postType === \"portfolio\"\n      ? { single: \"Project\", plural: \"Projects\", type: \"Project\" }\n      : { single: \"Blog\", plural: \"Blog\", type: \"Blog\" };\n\n\n  if (exclude != null && topTags.indexOf(exclude) > -1) { topTags.splice(topTags.indexOf(exclude), 1) }\n\n\n\n\n  return (\n    <div className=\"top-tags\">\n      <ul>\n      {back &&\n      <li className=\"more-tags\">\n        <Link to={`/${postType}`} style={{ margin: \"0 auto 0 0.5em\" }}>\n        <FontAwesomeIcon fixedWidth icon='arrow-left' />\n\n          Back to {postTypeLabels.plural}\n        </Link></li>}\n        {topTags && topTags.map((tag, i) => {\n          const tagLink = (tag === 'WordPress' ? `/${postType}/tags/wordpress/` :  `/${postType}/tags/${_.kebabCase(tag)}/`)\n          if (i < limit && tag !== exclude) {\n            return (\n              <li className=\"top-tag\" key={i}>\n                <Link to={tagLink}>\n                  <FontAwesomeIcon fixedWidth icon={tagIcons[tag]} />\n                                        {tag}\n                </Link>\n              </li>\n            )\n          } else {return null}\n        })}\n        <li className=\"more-tags\">\n\n          <Link to={`/${postType}/tags`}>\n            <FontAwesomeIcon fixedWidth icon='ellipsis-h' />\n            {postTypeLabels.single}&nbsp;Tags\n          </Link>\n        </li>\n      </ul>\n    </div>\n  )\n}\n\nexport default TopTags;","/**\n * PageTitle component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Drips from \"./atoms/drips\"\n\nconst PageTitle = ({ children, subtitle = \"\" }) => {\n\n  return (\n    <header className=\"page-title slim pink\" >\n      <Drips color=\"black\" slim/>\n\n      <h1>{children}</h1>\n      {subtitle && <h2>{subtitle}</h2>}\n    </header>\n  )\n}\n\nPageTitle.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default PageTitle\n","export default __webpack_public_path__ + \"static/portfolio-ogImage-7688584a88355ddf5f53303541bf2648.png\";","import React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport PageTitle from \"../components/pageTitle\"\nimport ProjectCard from \"../components/portfolio/projectCard\"\nimport TopTags from \"../components/common/topTags\"\n\nimport portfolioOG from \"../images/portfolio-ogImage.png\"\n\nconst Blog = ({ data, pageContext }) => {\n  const { edges: posts } = data.allMarkdownRemark\n\n  const tags = pageContext.topTags\n  // Iterate through each post, putting all found tags into `tags`\n  var topTags = Object.keys(tags).sort(function(a, b) {\n    return tags[a] < tags[b]\n  })\n\n  return (\n    <Layout >\n      <SEO\n        title={`Portfolio | ${topTags[0]}, ${topTags[1]}, ${topTags[2]}, & More `}\n        description={`Take a closer look at some of Jack's best E-Commerce & Web Development Work. `}\n        image={portfolioOG}\n      />\n      <PageTitle subtitle=\"Allow me to present some of my best work from throughout my 10+ year career in web development.\">Portfolio</PageTitle>\n      <section className=\"slim black\">\n        <TopTags topTags={topTags} postType=\"portfolio\" />\n      </section>\n      <main className=\"page_body page_body--grid\">\n\n        <div className=\"projects\">\n          {posts\n            .filter(post => post.node.fields.collection === \"portfolio\")\n            .filter(post => post.node.frontmatter.title.length > 0)\n            .map(({ node: post }, index) => {\n              return <ProjectCard post={post} index={index} />\n            })}\n        </div>\n      </main>\n    </Layout>\n  )\n}\nexport default Blog\n\nexport const pageQuery = graphql`\n  query AllBlogsQuery {\n    allMarkdownRemark(\n      sort: {\n        order: [DESC, DESC]\n        fields: [fields___weight, frontmatter___date]\n      }\n      filter: {\n        fields: { published: { eq: true }, collection: { eq: \"portfolio\" } }\n      }\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 250)\n          id\n          frontmatter {\n            title\n            description\n            color\n            date(formatString: \"MMMM DD, YYYY\")\n            tags\n            logo {\n              extension\n              publicURL\n            }\n          }\n          fields {\n            slug\n            collection\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["_","require","topTags","postType","back","exclude","limit","postTypeLabels","single","plural","type","indexOf","splice","className","Link","to","style","margin","fixedWidth","icon","map","tag","i","tagLink","kebabCase","key","tagIcons","children","subtitle","color","slim","data","pageContext","posts","allMarkdownRemark","edges","tags","Object","keys","sort","a","b","title","description","image","portfolioOG","filter","post","node","fields","collection","frontmatter","length","index"],"sourceRoot":""}