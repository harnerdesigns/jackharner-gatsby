{"version":3,"file":"component---src-templates-tag-js-181ce615d77ac05adf67.js","mappings":"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","sources":["webpack://jackharner-gatsby/./src/components/common/topTags.js","webpack://jackharner-gatsby/./src/components/pageTitle.js","webpack://jackharner-gatsby/./src/templates/tags/tag-descriptions.js","webpack://jackharner-gatsby/./src/templates/tag.js"],"sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport tagIcons from \"../../templates/tags/tag-icons\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nconst _ = require(\"lodash\")\n\n\nconst TopTags = ({ topTags = [], postType = null, back = false, exclude = null, limit = 6 }) => {\n\n  const postTypeLabels =\n    postType === \"portfolio\"\n      ? { single: \"Project\", plural: \"Projects\", type: \"Project\" }\n      : { single: \"Blog\", plural: \"Blog\", type: \"Blog\" };\n\n\n  if (exclude != null && topTags.indexOf(exclude) > -1) { topTags.splice(topTags.indexOf(exclude), 1) }\n\n\n\n\n  return (\n    <div className=\"top-tags\">\n      <ul>\n      {back &&\n      <li className=\"more-tags\">\n        <Link to={`/${postType}`} style={{ margin: \"0 auto 0 0.5em\" }}>\n        <FontAwesomeIcon fixedWidth icon='arrow-left' />\n\n          Back to {postTypeLabels.plural}\n        </Link></li>}\n        {topTags && topTags.map((tag, i) => {\n          const tagLink = (tag === 'WordPress' ? `/${postType}/tags/wordpress/` :  `/${postType}/tags/${_.kebabCase(tag)}/`)\n          if (i < limit && tag !== exclude) {\n            return (\n              <li className=\"top-tag\" key={i}>\n                <Link to={tagLink}>\n                  <FontAwesomeIcon fixedWidth icon={tagIcons[tag]} />\n                                        {tag}\n                </Link>\n              </li>\n            )\n          } else {return null}\n        })}\n        <li className=\"more-tags\">\n\n          <Link to={`/${postType}/tags`}>\n            <FontAwesomeIcon fixedWidth icon='ellipsis-h' />\n            {postTypeLabels.single}&nbsp;Tags\n          </Link>\n        </li>\n      </ul>\n    </div>\n  )\n}\n\nexport default TopTags;","/**\n * PageTitle component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Drips from \"./atoms/drips\"\n\nconst PageTitle = ({ children, subtitle = \"\" }) => {\n\n  return (\n    <header className=\"page-title slim pink\" >\n      <Drips color=\"black\" slim/>\n\n      <h1>{children}</h1>\n      {subtitle && <h2>{subtitle}</h2>}\n    </header>\n  )\n}\n\nPageTitle.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default PageTitle\n","const tagDescriptions = {\n  Automation: \"I love automating things. If I have to do a task more than, like, twice, I'm going  to try to automate it. Here are some thoughts on things you can automate throughout your career, your house, & your life.\",\n  WordPress: \"40% of the internet is powered by WordPress. Check out these posts I've written along my time building on the world's most popular CMS.\"\n}\n\nexport default tagDescriptions\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport BlogCard from \"../components/blog/blogCard\"\nimport PageTitle from \"../components/pageTitle\"\nimport ProjectCard from \"../components/portfolio/projectCard\"\nimport TopTags from \"../components/common/topTags\"\nimport SEO from \"../components/seo\"\nimport tagDescriptions from \"./tags/tag-descriptions\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport tagIcons from \"./tags/tag-icons\"\n\nclass TagRoute extends React.Component {\n  render() {\n    const posts = this.props.data.allMarkdownRemark.edges\n    const tag = this.props.pageContext.tag\n    const totalCount = this.props.data.allMarkdownRemark.totalCount\n    const postType = this.props.pageContext.postType\n\n    const postTypeLabels =\n      postType === \"portfolio\"\n        ? { single: \"Project\", plural: \"Projects\", type: \"Project\" }\n        : { single: \"Blog Post\", plural: \"Blog Posts\", type: \"Blog\" }\n\n    let topTags = this.props.pageContext.topTags\n    topTags = Object.keys(topTags).sort(function(a, b) {\n      return topTags[a] < topTags[b]\n    })\n\n    const tagHeader = <>{totalCount} {\n      totalCount === 1 ? postTypeLabels.single : postTypeLabels.plural\n    } Tagged {tag}</>\n\n    return (\n      <Layout>\n          <SEO title={`${tag} ${postTypeLabels.plural}`} />\n\n          <PageTitle><FontAwesomeIcon fixedWidth icon={tagIcons[tag]} /> {tagHeader}</PageTitle>\n          {tagDescriptions[tag] && <p className=\"tag__description\">{tagDescriptions[tag]}</p>}\n          <section className=\"slim black\">\n            <TopTags\n              topTags={topTags}\n              postType={postType}\n              back={true}\n              exclude={tag}\n              limit={5}\n            />\n          </section>\n          <main className=\"page_body page_body--grid\">\n            <div className={postType === \"blog\" ? \"blog-posts\" : \"projects\"}>\n              {posts\n                .filter(post => post.node.frontmatter.title.length > 0)\n                .map(({ node: post }, index) => {\n\n                  let card =\n                    postType === \"portfolio\" ? (\n                      <ProjectCard post={post} index={index} />\n                    ) : (\n                      <>\n                        <BlogCard\n                          post={post}\n                          index={index}\n                        />\n                      </>\n                    )\n\n                  return <>{card}</>\n                })}\n\n            </div>\n          </main>\n      </Layout>\n    )\n  }\n}\n\nexport default TagRoute\n\nexport const tagPageQuery = graphql`query SingleTagPage($tag: String, $postType: String) {\n  site {\n    siteMetadata {\n      title\n    }\n  }\n  allMarkdownRemark(\n    limit: 1000\n    sort: [{fields: {weight: DESC}}, {fields: {date: DESC}}]\n    filter: {frontmatter: {tags: {in: [$tag]}}, fields: {published: {eq: true}, unlisted: {ne: true}, collection: {eq: $postType}}}\n  ) {\n    totalCount\n    edges {\n      node {\n        excerpt(pruneLength: 250)\n        id\n        frontmatter {\n          title\n          subtitle\n          date(formatString: \"MMMM DD, YYYY\")\n          updated(formatString: \"MMMM DD, YYYY\")\n          published\n          description\n          featuredImage {\n            childImageSharp {\n              gatsbyImageData(layout: CONSTRAINED, height: 350, transformOptions: {fit: COVER})\n            }\n          }\n          logo {\n            publicURL\n          }\n          tags\n          color\n        }\n        fields {\n          slug\n          collection\n          externalLink\n          published\n          unlisted\n          weight\n          date(formatString: \"MMMM DD, YYYY\")\n        }\n      }\n    }\n  }\n}`\n"],"names":["_","require","_ref","topTags","postType","back","exclude","limit","postTypeLabels","single","plural","type","indexOf","splice","React","className","Link","to","style","margin","FontAwesomeIcon","fixedWidth","icon","map","tag","i","tagLink","kebabCase","key","tagIcons","children","subtitle","Drips","color","slim","Automation","WordPress","TagRoute","_React$Component","apply","arguments","_inheritsLoose","prototype","render","posts","this","props","data","allMarkdownRemark","edges","pageContext","totalCount","Object","keys","sort","a","b","tagHeader","Layout","SEO","title","PageTitle","tagDescriptions","TopTags","filter","post","node","frontmatter","length","index","card","ProjectCard","BlogCard"],"sourceRoot":""}