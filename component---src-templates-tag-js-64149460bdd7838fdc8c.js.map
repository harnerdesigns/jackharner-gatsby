{"version":3,"sources":["webpack:///./src/components/portfolio/projectCard.js","webpack:///./src/templates/tag.js"],"names":["ProjectCard","post","index","small","nolink","to","fields","slug","className","data-color","frontmatter","color","style","background","_","camelCase","title","logo","src","publicURL","alt","description","tags","map","tag","defaultProps","TagRoute","render","posts","this","props","data","allMarkdownRemark","edges","pageContext","site","siteMetadata","totalCount","postType","postTypeLabels","single","plural","type","topTags","Object","keys","sort","a","b","tagHeader","back","exclude","filter","node","length","ShowCard","card","large","React","Component","tagPageQuery"],"mappings":"8FACA,0DAKMA,EAAc,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OACzC,OACE,kBAAC,OAAD,CACEC,GAAKD,EAA4B,GAAnBH,EAAKK,OAAOC,KAC1BC,UAAW,gCAAkCN,EAC7CO,aAAYR,EAAKS,YAAYC,MAC7BC,MAAO,CAAEC,WAAYZ,EAAKS,YAAYC,QAEtC,6BACEH,UACE,0BACAM,IAAEC,UAAUd,EAAKS,YAAYM,QAC5Bb,EAAQ,wBAA0B,KAKpCF,EAAKS,YAAYO,MAClB,yBAAKT,UAAU,iBACb,yBACEU,IAAKjB,EAAKS,YAAYO,KAAKE,UAC3BX,UAAU,OACVY,IAAKnB,EAAKS,YAAYM,SAG1B,yBAAKR,UAAU,gBACb,wBAAIA,UAAU,kBAAkBP,EAAKS,YAAYM,OAEhB,MAAhCf,EAAKS,YAAYW,YAChB,wBAAIb,UAAU,wBACXP,EAAKS,YAAYW,aAGpB,GAGF,wBAAIb,UAAU,iBACXP,EAAKS,YAAYY,KAAKC,KAAI,SAACC,EAAKtB,GAC/B,OAAO,4BAAKsB,WAa1BxB,EAAYyB,aAAe,CACzBxB,KAAM,IAGOD,O,wNCpDT0B,E,kGACJC,OAAA,WACE,IAAMC,EAAQC,KAAKC,MAAMC,KAAKC,kBAAkBC,MAC1CT,EAAMK,KAAKC,MAAMI,YAAYV,IAC7BR,EAAQa,KAAKC,MAAMC,KAAKI,KAAKC,aAAapB,MAC1CqB,EAAaR,KAAKC,MAAMC,KAAKC,kBAAkBK,WAC/CC,EAAWT,KAAKC,MAAMI,YAAYI,SAElCC,EACS,cAAbD,EACI,CAAEE,OAAQ,UAAWC,OAAQ,WAAYC,KAAM,WAC/C,CAAEF,OAAQ,YAAaC,OAAQ,aAAcC,KAAM,QAErDC,EAAUd,KAAKC,MAAMI,YAAYS,QACrCA,EAAUC,OAAOC,KAAKF,GAASG,MAAK,SAAUC,EAAGC,GAC/C,OAAOL,EAAQI,GAAKJ,EAAQK,MAG9B,IAAMC,EAAeZ,EAAN,IAAoBb,EAApB,KACE,IAAfa,EAAmBE,EAAeC,OAASD,EAAeE,QAG5D,OACE,kBAAC,IAAD,KACE,6BAASjC,UAAU,WACjB,kBAAC,IAAD,CAAQQ,MAAUQ,EAAL,IAAYe,EAAeE,OAA3B,MAAuCzB,IAEpD,kBAAC,IAAD,KAAYiC,GAEZ,0BAAMzC,UAAU,6BACd,kBAAC,IAAD,CAASmC,QAASA,EAASL,SAAUA,EAAUY,MAAM,EAAMC,QAAS3B,IAGpE,yBAAKhB,UAAU,cACZoB,EACEwB,QAAO,SAAAnD,GAAI,OAAIA,EAAKoD,KAAK3C,YAAYM,MAAMsC,OAAS,KACpD/B,KAAI,WAAiBrB,GAAW,IAC3BqD,EADQtD,EAAkB,EAAxBoD,MAGDnD,EAAQ,GAAK,GAAM,IAAKqD,EAAW,kBAAC,IAAD,CAAMrD,OAAQA,EAAQ,GAAK,KAEnE,IAAIsD,EACW,cAAblB,EACE,kBAAC,IAAD,CAAarC,KAAMA,EAAMC,MAAOA,IAE9B,oCAAE,kBAAC,IAAD,CAAUD,KAAMA,EAAMC,MAAOA,EAAOuD,OAAQvD,EAAQ,GAAK,GAAM,GAAe,IAAVA,IACnEqD,GAIT,OAAO,oCAAGC,W,GAlDLE,IAAMC,WA4DdjC,YAER,IAAMkC,EAAY","file":"component---src-templates-tag-js-64149460bdd7838fdc8c.js","sourcesContent":["import PropTypes from \"prop-types\"\nimport React from \"react\"\nimport _ from \"lodash\"\n\nimport { Link } from \"gatsby\"\n\nconst ProjectCard = ({ post, index, small, nolink }) => {\n  return (\n    <Link\n      to={!nolink ? post.fields.slug : \"\"}\n      className={\"project__link project__link--\" + index}\n      data-color={post.frontmatter.color}\n      style={{ background: post.frontmatter.color }}\n    >\n      <article\n        className={\n          \"project__card project--\" +\n          _.camelCase(post.frontmatter.title) +\n          (small ? \" project__card--small\" : \"\")\n        }\n      >\n        \n\n        {post.frontmatter.logo &&\n        <div className=\"logo__wrapper\">\n          <img\n            src={post.frontmatter.logo.publicURL}\n            className=\"logo\"\n            alt={post.frontmatter.title}\n          />\n        </div>}\n        <div className=\"card__titles\">\n          <h2 className=\"project__title\">{post.frontmatter.title}</h2>\n\n          {post.frontmatter.description != null ? (\n            <h4 className=\"project__description\">\n              {post.frontmatter.description}\n            </h4>\n          ) : (\n            \"\"\n          )}\n\n          <ul className=\"project__tags\">\n            {post.frontmatter.tags.map((tag, index) => {\n              return <li>{tag}</li>\n            })}\n          </ul>\n        </div>\n      </article>\n    </Link>\n  )\n}\n\nProjectCard.propTypes = {\n  post: PropTypes.object,\n}\n\nProjectCard.defaultProps = {\n  post: {},\n}\n\nexport default ProjectCard\n","import React from \"react\"\nimport Helmet from \"react-helmet\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport BlogCard from \"../components/blog/blogCard\"\nimport PageTitle from \"../components/pageTitle\"\nimport ProjectCard from \"../components/portfolio/projectCard\"\nimport TopTags from \"../components/common/topTags\"\nimport Vert from \"../components/verts/vert\"\nclass TagRoute extends React.Component {\n  render() {\n    const posts = this.props.data.allMarkdownRemark.edges\n    const tag = this.props.pageContext.tag\n    const title = this.props.data.site.siteMetadata.title\n    const totalCount = this.props.data.allMarkdownRemark.totalCount\n    const postType = this.props.pageContext.postType\n\n    const postTypeLabels =\n      postType === \"portfolio\"\n        ? { single: \"Project\", plural: \"Projects\", type: \"Project\" }\n        : { single: \"Blog Post\", plural: \"Blog Posts\", type: \"Blog\" }\n\n    let topTags = this.props.pageContext.topTags\n    topTags = Object.keys(topTags).sort(function (a, b) {\n      return topTags[a] < topTags[b]\n    })\n\n    const tagHeader = `${totalCount} ${tag} ${\n      totalCount === 1 ? postTypeLabels.single : postTypeLabels.plural\n      }`\n\n    return (\n      <Layout>\n        <section className=\"section\">\n          <Helmet title={`${tag} ${postTypeLabels.plural} | ${title}`} />\n\n          <PageTitle>{tagHeader}</PageTitle>\n\n          <main className=\"page_body page_body--grid\">\n            <TopTags topTags={topTags} postType={postType} back={true} exclude={tag} />\n\n\n            <div className=\"blog-posts\">\n              {posts\n                .filter(post => post.node.frontmatter.title.length > 0)\n                .map(({ node: post }, index) => {\n                  let ShowCard;\n\n                  if ((index + 1) % 6 === 0) { ShowCard = <Vert index={(index + 1) / 6} /> }\n\n                  let card =\n                    postType === \"portfolio\" ? (\n                      <ProjectCard post={post} index={index} />\n                    ) : (\n                        <><BlogCard post={post} index={index} large={(index + 1) % 5 === 0 || index === 0} />\n                          {ShowCard}</>\n\n                      )\n\n                  return <>{card}</>\n                })}\n            </div>\n          </main>\n        </section>\n      </Layout>\n    )\n  }\n}\n\nexport default TagRoute\n\nexport const tagPageQuery = graphql`\n  query SingleTagPage($tag: String, $postType: String) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      limit: 1000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: {\n        frontmatter: { tags: { in: [$tag] } }\n        fields: { published: { eq: true }, unlisted: { ne: true }, collection: { eq: $postType } }\n      }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt(pruneLength: 250)\n          id\n          frontmatter {\n            title\n            subtitle\n            date(formatString: \"MMMM DD, YYYY\")\n            published\n            featuredImage {\n              childImageSharp {\n                resize(width: 500, height: 500, cropFocus: CENTER) {\n                  src\n                }\n              }\n            }\n            logo {\n              publicURL\n            }\n            tags\n            color\n          }\n          fields {\n            slug\n            collection\n            externalLink\n            published\n            unlisted\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}