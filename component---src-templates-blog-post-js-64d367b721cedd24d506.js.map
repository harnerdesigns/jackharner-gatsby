{"version":3,"sources":["webpack:///./src/components/blog/blogCard.js","webpack:///./src/templates/blog-post.js"],"names":["BlogCard","post","index","small","large","frontmatter","tags","filterTags","filter","tag","i","map","length","key","to","fields","slug","className","externalLink","src","featuredImage","childImageSharp","resize","alt","title","published","subtitle","defaultProps","Template","props","data","markdownRemark","related","pageContext","postContent","html","replace","description","excerpt","image","ogImage","sizes","href","target","rel","icon","label","match","size","extraStyle","width","dangerouslySetInnerHTML","__html","pageQuery"],"mappings":"4FACA,iDAWMA,EAAW,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MAGpC,GAAGH,EAAKI,YAAYC,KAEhB,KAAIC,EAAaN,EAAKI,YAAYC,KAAKE,QAAO,SAACC,EAAKC,GAAN,OAAaA,EAAI,KAC7B,IAA+BH,EAAWI,KAAI,SAACF,EAAKC,GAClF,OAAQ,oCAAGD,EAAKC,EAAIH,EAAWK,OAAS,EAAI,KAAQL,EAAWK,OAASX,EAAKI,YAAYC,KAAKM,OAAS,QAAUX,EAAKI,YAAYC,KAAKM,OAASL,EAAWK,QAAU,OAG7K,OACI,kBAAC,IAAD,CAAMC,IAAKX,EAAOY,GAAIb,EAAKc,OAAOC,KAAMC,UAAW,cAA0B,OAAVf,EAAiB,gBAAkBA,EAAQ,KAAOD,EAAKc,OAAOG,aAAe,wBAA0B,KAAOf,EAAQ,qBAAuB,KAAOC,EAAQ,qBAAuB,KAClP,6BAASa,UAAU,cACf,yBAAKA,UAAU,0BACX,yBAAKE,IAAKlB,EAAKI,YAAYe,cAAcC,gBAAgBC,OAAOH,IAAKF,UAAU,gBAAgBM,IAAKtB,EAAKI,YAAYmB,SAEzH,yBAAKP,UAAU,iBACqB,IAA/BhB,EAAKI,YAAYoB,WAAsB,wBAAIR,UAAU,uBAAuBO,MAAM,+BAA3C,SACxC,wBAAIP,UAAU,eAAehB,EAAKI,YAAYmB,OAC5CvB,EAAKI,YAAYqB,SAAW,wBAAIT,UAAU,kBAAkBhB,EAAKI,YAAYqB,UAAiB,GAEhG,yBAAKT,UAAU,mBApBnBX,OAmChBN,EAAS2B,aAAe,CACpB1B,KAAM,IAGKD,O,kCCpDf,kNAWe,SAAS4B,EAASC,GAC/B,IAAM5B,EAAO4B,EAAMC,KAAKC,eAChBC,EAAYH,EAAMI,YAAlBD,QACJE,EAAcjC,EAAKkC,KAEvB,OADAD,EAAcA,EAAYE,QAAQ,OAAO,4JAEvC,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEZ,MAAOvB,EAAKI,YAAYmB,MACxBa,YAAapC,EAAKqC,QAClBC,MACEtC,EAAKc,OAAOyB,QACRvC,EAAKI,YAAYmC,QAAQnB,gBAAgBoB,MAAMtB,IAC/ClB,EAAKI,YAAYe,cAAcC,gBAAgBoB,MAAMtB,MAG7D,kBAAC,IAAD,CAAWlB,KAAMA,IACjB,+BAAWgB,UAAU,sBAClBhB,EAAKc,OAAOG,aACX,kBAAC,IAAD,CACEwB,KAAMzC,EAAKc,OAAOG,aAClByB,OAAO,SACPC,IAAI,sBACJC,KAAK,oBACLC,MACE,qCACA7C,EAAKc,OAAOG,aAAa6B,MACvB,qCACA,GAEJC,KAAK,QACLC,WAAY,CAAEC,MAAO,SAGvB,GAIF,0BACEjC,UAAW,cAAgBhB,EAAKc,OAAOC,KACvCmC,wBAAyB,CAAEC,OAAQlB,MAKvC,+BAAWjB,UAAU,cACnB,6BAASA,UAAU,sBACjB,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAYhB,KAAMA,IAClB,kBAAC,IAAD,MACA,yBAAKgB,UAAU,kBACb,6CACA,4BACGe,EAAQrB,KAAI,SAACV,EAAMC,GAClB,OACE,4BACE,kBAAC,IAAD,CAAUD,KAAMA,EAAME,OAAK,aAWxC,IAAMkD,EAAS","file":"component---src-templates-blog-post-js-64d367b721cedd24d506.js","sourcesContent":["import PropTypes from \"prop-types\"\nimport React from \"react\"\n\nimport Link from \"../atoms/maybeExternal\";\n\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\n\n\n\n\n\nconst BlogCard = ({ post, index, small, large }) => {\nlet filterTags, tags;\n\n    if(post.frontmatter.tags){\n\n        let filterTags = post.frontmatter.tags.filter((tag, i) => (i < 3 ? true : false))\n        let tags = <div className=\"tags\"><FontAwesomeIcon icon=\"tag\" /> {filterTags.map((tag, i) => {\n            return (<>{tag}{i < filterTags.length - 1 ? \", \" : (filterTags.length < post.frontmatter.tags.length ? \", + \" + (post.frontmatter.tags.length - filterTags.length) : \"\")}</>)\n        })}</div>;\n    }\n    return (\n        <Link key={index} to={post.fields.slug} className={\"blog__link\" + (index !== null ? \" blog__link--\" + index : \"\") + (post.fields.externalLink ? \" blog__link--external\" : \"\") + (small ? \" blog__link--small\" : \"\") + (large ? \" blog__link--large\" : \"\")}>\n            <article className=\"blog__card\">\n                <div className=\"featuredImage__wrapper\">\n                    <img src={post.frontmatter.featuredImage.childImageSharp.resize.src} className=\"featuredImage\" alt={post.frontmatter.title} />\n                </div>\n                <div className=\"card__titles\">\n                    {post.frontmatter.published !== true && <h5 className='notice notice--draft' title=\"Won't be published on build\">DRAFT</h5>}\n                    <h2 className=\"post__title\">{post.frontmatter.title}</h2>\n                    {(post.frontmatter.subtitle ? <h3 className=\"post__subtitle\">{post.frontmatter.subtitle}</h3> : \"\")}\n                    {/* {(index === 0 ? <p className=\"post__excerpt\">{post.excerpt} <Link to={post.fields.slug}>Read&nbsp;More&nbsp;&raquo;</Link></p> : \"\")} */}\n                    <div className=\"card__meta\">\n\n                        {tags}\n                    </div>\n                </div>\n            </article>\n\n        </Link>\n    )\n}\n\nBlogCard.propTypes = {\n    post: PropTypes.object,\n}\n\nBlogCard.defaultProps = {\n    post: {},\n}\n\nexport default BlogCard\n\n\n\n\n\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport BlogTitle from \"../components/blog/blogTitle\";\nimport Button from \"../components/atoms/button\";\nimport BlogCard from \"../components/blog/blogCard\";\nimport ShareLinks from \"../components/social/shareLinks\";\nimport RssCard from \"../components/blog/rssCard\";\nimport Brave from \"../components/verts/brave\";\n\nexport default function Template(props) {\n  const post = props.data.markdownRemark\n  const { related } = props.pageContext\n  let postContent = post.html\n  postContent = postContent.replace(\"</p>\",'</p><script async=\"true\" type=\"text/javascript\" src=\"//cdn.carbonads.com/carbon.js?serve=CE7ITK7W&placement=jackharnercom\" id=\"_carbonads_js\"></script>')\n  return (\n    <Layout>\n      <SEO\n        title={post.frontmatter.title}\n        description={post.excerpt}\n        image={\n          post.fields.ogImage\n            ? post.frontmatter.ogImage.childImageSharp.sizes.src\n            : post.frontmatter.featuredImage.childImageSharp.sizes.src\n        }\n      />\n      <BlogTitle post={post} />\n      <container className=\"half black content\">\n        {post.fields.externalLink ? (\n          <Button\n            href={post.fields.externalLink}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            icon=\"external-link-alt\"\n            label={\n              \" <strong>See Full Post</strong> @ \" +\n              post.fields.externalLink.match(\n                /^https?:\\/\\/([^/?#]+)(?:[/?#]|$)/i\n              )[1]\n            }\n            size=\"large\"\n            extraStyle={{ width: \"80%\" }}\n          />\n        ) : (\n          \"\"\n        )}\n\n        \n        <main\n          className={\"post__body \" + post.fields.slug}\n          dangerouslySetInnerHTML={{ __html: postContent }}\n        >\n\n        </main>\n      </container>\n      <container className=\"slim black\">\n        <section className=\"post__post-content\">\n          <Brave />\n          <ShareLinks post={post} />\n          <RssCard />\n          <nav className=\"postNavigation\">\n            <h3>Related Posts</h3>\n            <ul>\n              {related.map((post, index) => {\n                return (\n                  <li>\n                    <BlogCard post={post} small />\n                  </li>\n                )\n              })}\n            </ul>\n          </nav>\n        </section>\n      </container>\n    </Layout>\n  )\n}\nexport const pageQuery = graphql`\nquery BlogPostByPath($slug: String!) {\n  markdownRemark(fields: {slug: {eq: $slug}}) {\n    html\n    excerpt(pruneLength: 150)\n    wordCount {\n      words\n    }\n    frontmatter {\n      date(formatString: \"MMMM DD, YYYY\")\n      title\n      subtitle\n      tags\n      featuredImage {\n        absolutePath\n        childImageSharp {\n          sizes {\n            ...GatsbyImageSharpSizes\n            src\n            originalImg\n          }\n        }\n      }\n\n      ogImage {\n        absolutePath\n        childImageSharp {\n          sizes {\n            ...GatsbyImageSharpSizes\n            src\n            originalImg\n          }\n        }\n      }\n    }\n    fields{\n      externalLink\n      slug\n      ogImage\n      date(formatString: \"MMMM DD, YYYY\")\n      unlisted\n    }\n  }\n}\n`"],"sourceRoot":""}