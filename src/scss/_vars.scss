@use 'sass:math';

:root {
  --color: #e91e63;
  --text-color: white;
  --text-color--inverted: black;
  --darker-color: #aa1145;
  --darker-text-color: white;

  --purple: #9c27b0;

  --border-radius: 10px;

  --gradient: radial-gradient(circle at 0% 250%, var(--color), var(--darker-color), var(--purple), var(--color));

  --ukraine: linear-gradient(to bottom, #005BBB 50%, #FFD500 50%);
}

$red: #f44336;
$pink: var(--color, #e91e63);
$black: #000;
$gray: #212121;
$pageWidth: 100%;

@mixin breakpoint($point) {
  @if $point==desktop {
      @media (min-width: $pageWidth) {
          @content ;
      }
  }
  @else if $point==laptop {
      @media (min-width: 1024px) {
          @content ;
      }
  }
  @else if $point==tablet {
      @media (min-width: 768px) {
          @content ;
      }
  }
  @else if $point==tabletdown {
      @media (max-width: 768px) {
          @content ;
      }
  }
  @else if $point==phablet {
      @media (min-width: 375px) {
          @content ;
      }
  }
  @else if $point==mobileonly {
      @media (max-width: 375px) {
          @content ;
      }
  }
  @else if $point==portrait {
      @media (orientation: portrait) {
          @content ;
      }
  }
}


.mobile-only{
  display: none;
  @include breakpoint(tabletdown){
      display:flex;
  }
}

.tablet-only{
  display: none;
  @include breakpoint(tabletdown){
      display:flex;
  }
  @include breakpoint(tablet){
      display:flex;
  }
  @include breakpoint(laptop){
      display: none;
  }
}
.desktop-only{
  display: none;
  @include breakpoint(laptop){
      display:flex;
  }
}

/// Computes a top-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}

@function top-shadow($depth, $color: #000) {
  $primary-offset: nth(1 3 10 14 19, $depth) * 1px;
  $blur: nth(2 3 10 14 19, $depth) * 4px;
  $color: rgba($color, nth(0.12 0.16 0.19 0.25 0.3, $depth));

  @return 0 $primary-offset $blur $color;
}

/// Computes a bottom-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}

@function bottom-shadow($depth, $color: #000) {
  $primary-offset: nth(1.5 3 6 10 15, $depth) * 1px;
  $blur: nth(1 3 3 5 6, $depth) * 4px;
  $color: rgba($color, nth(0.24 0.23 0.23 0.22 0.22, $depth));

  @return 0 $primary-offset $blur $color;
}

@mixin card($depth, $color: #000) {
  @if $depth < 1 {
    box-shadow: inset bottom-shadow(abs($depth), $color), inset top-shadow(abs($depth), $color);
  } @else if $depth>5 {
    @warn "Invalid $depth `#{$depth}` for mixin `card`.";
  } @else {
    box-shadow: bottom-shadow($depth, $color), top-shadow($depth, $color);
  }
}

@keyframes pulse {
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(1.25);
  }

  100% {
    transform: scale(1);
  }
}

@mixin hardShadow($distance, $color, $filter: false) {
  $shadow: "";
  @for $i from 1 through $distance {
    @if $i == $distance {
      @if $filter == true {
        $shadow: #{$shadow} drop-shadow(#{math.div($i , 3)}px #{math.div($i , 3)}px 0 #{$color});
      } @else {
        $shadow: #{$shadow} #{$i}px #{$i}px 0 #{$color};
      }
    } @else {
      @if $filter == true {
      $shadow: #{$shadow} drop-shadow(#{$i}px #{$i}px 0 #{$color}) \a;

      } @else {

      $shadow: #{$shadow} #{$i}px #{$i}px 0 #{$color}, \a;


      }
    }
  }

  @if $filter == true {
    filter: $shadow;
  }
  @else {
    box-shadow: $shadow;
  }
}
