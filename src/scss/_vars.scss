:root {
  --color: #E91E63;

  --darkerColor: darken(#E91E63, 20);

  --text-color: white;
}

$red: #f44336;
$pink: var(--color, #E91E63);
$black: #000;
$gray: #333;

@mixin breakpoint($point) {
  @if $point == desktop {
    @media (min-width: 70em) {
      @content;
    }
  } @else if $point == laptop {
    @media (min-width: 64em) {
      @content;
    }
  } @else if $point == tablet {
    @media (min-width: 37.5em) {
      @content;
    }
  } @else if $point == phablet {
    @media (min-width: 37.5em) {
      @content;
    }
  } @else if $point == mobileonly {
    @media (max-width: 37.5em) {
      @content;
    }
  }
}

/// Computes a top-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}

@function top-shadow($depth, $color: #000) {
  $primary-offset: nth(1 3 10 14 19, $depth) * 1px;
  $blur: nth(2 3 10 14 19, $depth) * 4px;
  $color: rgba($color, nth(0.12 0.16 0.19 0.25 0.3, $depth));

  @return 0 $primary-offset $blur $color;
}

/// Computes a bottom-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}

@function bottom-shadow($depth, $color: #000) {
  $primary-offset: nth(1.5 3 6 10 15, $depth) * 1px;
  $blur: nth(1 3 3 5 6, $depth) * 4px;
  $color: rgba($color, nth(0.24 0.23 0.23 0.22 0.22, $depth));

  @return 0 $primary-offset $blur $color;
}

@mixin card($depth, $color: #000) {
  @if $depth < 1 {
    box-shadow: inset bottom-shadow(abs($depth), $color), inset top-shadow(abs($depth), $color);
  } @else if $depth>5 {
    @warn "Invalid $depth `#{$depth}` for mixin `card`.";
  } @else {
    box-shadow: bottom-shadow($depth, $color), top-shadow($depth, $color);
  }
}
