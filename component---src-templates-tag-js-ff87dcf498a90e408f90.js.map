{"version":3,"file":"component---src-templates-tag-js-ff87dcf498a90e408f90.js","mappings":"uKAKMA,EAAIC,EAAQ,MAmDlB,IAhDgB,SAAH,GAAoF,IAAD,IAA7EC,QAAAA,OAAO,MAAG,GAAE,MAAEC,SAAAA,OAAQ,MAAG,KAAI,MAAEC,KAAAA,OAAI,OAAQ,MAAEC,QAAAA,OAAO,MAAG,KAAI,MAAEC,MAAAA,OAAK,MAAG,EAAC,EAEjFC,EACS,cAAbJ,EACI,CAAEK,OAAQ,UAAWC,OAAQ,WAAYC,KAAM,WAC/C,CAAEF,OAAQ,OAAQC,OAAQ,OAAQC,KAAM,QAQ9C,OALe,MAAXL,GAAmBH,EAAQS,QAAQN,IAAY,GAAKH,EAAQU,OAAOV,EAAQS,QAAQN,GAAU,GAM/F,uBAAKQ,UAAU,YACb,0BACCT,GACD,sBAAIS,UAAU,aACZ,gBAAC,EAAAC,KAAI,CAACC,GAAE,IAAMZ,EAAYa,MAAO,CAAEC,OAAQ,mBAC3C,gBAAC,IAAe,CAACC,YAAU,EAACC,KAAK,eAAe,WAErCZ,EAAeE,SAEzBP,GAAWA,EAAQkB,KAAI,SAACC,EAAKC,GAC5B,IAAMC,EAAmB,cAARF,EAAmB,IAAOlB,EAAQ,uBAA0BA,EAAQ,SAASH,EAAEwB,UAAUH,GAAI,IAC9G,OAAIC,EAAIhB,GAASe,IAAQhB,EAErB,sBAAIQ,UAAU,UAAUY,IAAKH,GAC3B,gBAAC,EAAAR,KAAI,CAACC,GAAIQ,GACR,gBAAC,IAAe,CAACL,YAAU,EAACC,KAAMO,EAAAA,EAASL,KACpBA,IAIhB,IACjB,IACA,sBAAIR,UAAU,aAEZ,gBAAC,EAAAC,KAAI,CAACC,GAAE,IAAMZ,EAAQ,SACpB,gBAAC,IAAe,CAACe,YAAU,EAACC,KAAK,eAChCZ,EAAeC,OAAO,WAMnC,C,+CC3BA,IAhBkB,SAAH,GAAqC,IAA/BmB,EAAQ,EAARA,SAAS,EAAD,EAAEC,SAAAA,OAAQ,MAAG,GAAE,EAE1C,OACE,0BAAQf,UAAU,wBAChB,gBAAC,IAAK,CAACgB,MAAM,QAAQC,MAAI,IAEzB,0BAAKH,GACJC,GAAY,0BAAKA,GAGxB,C,kHCZMG,EAAQ,8DA+DX,OA/DW,wBACZC,OAAA,WACE,IAAMC,EAAQC,KAAKC,MAAMC,KAAKC,kBAAkBC,MAC1CjB,EAAMa,KAAKC,MAAMI,YAAYlB,IAC7BmB,EAAaN,KAAKC,MAAMC,KAAKC,kBAAkBG,WAC/CrC,EAAW+B,KAAKC,MAAMI,YAAYpC,SAElCI,EACS,cAAbJ,EACI,CAAEK,OAAQ,UAAWC,OAAQ,WAAYC,KAAM,WAC/C,CAAEF,OAAQ,YAAaC,OAAQ,aAAcC,KAAM,QAErDR,EAAUgC,KAAKC,MAAMI,YAAYrC,QACrCA,EAAUuC,OAAOC,KAAKxC,GAASyC,MAAK,SAASC,EAAGC,GAC9C,OAAO3C,EAAQ0C,GAAK1C,EAAQ2C,EAC9B,IAEA,IAAMC,EAAY,gCAAGN,EAAW,IACf,IAAfA,EAAmBjC,EAAeC,OAASD,EAAeE,OAC3D,WAASY,GAEV,OACE,gBAAC,IAAM,KACH,gBAAC,IAAG,CAAC0B,MAAU1B,EAAG,IAAId,EAAeE,SAErC,gBAAC,IAAS,KAAEqC,GACZ,2BAASjC,UAAU,cACjB,gBAAC,IAAO,CACNX,QAASA,EACTC,SAAUA,EACVC,MAAM,EACNC,QAASgB,EACTf,MAAO,KAGX,wBAAMO,UAAU,6BACd,uBAAKA,UAAwB,SAAbV,EAAsB,aAAe,YAClD8B,EACEe,QAAO,SAAAC,GAAI,OAAIA,EAAKC,KAAKC,YAAYJ,MAAMK,OAAS,CAAC,IACrDhC,KAAI,WAAiBiC,GAAW,IAAnBJ,EAAI,EAAVC,KAGFI,EACW,cAAbnD,EACE,gBAAC,IAAW,CAAC8C,KAAMA,EAAMI,MAAOA,IAEhC,gCACE,gBAAC,IAAQ,CACPJ,KAAMA,EACNI,MAAOA,EACPE,OAAQF,EAAQ,GAAK,GAAM,GAAe,IAAVA,IAVpCG,WAgBJ,OAAO,gCAAGF,EACZ,MAMd,EAAC,EA/DW,CAASG,EAAAA,WAkEvB,W","sources":["webpack://jackharner-gatsby/./src/components/common/topTags.js","webpack://jackharner-gatsby/./src/components/pageTitle.js","webpack://jackharner-gatsby/./src/templates/tag.js"],"sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport tagIcons from \"../../templates/tags/tag-icons\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nconst _ = require(\"lodash\")\n\n\nconst TopTags = ({ topTags = [], postType = null, back = false, exclude = null, limit = 6 }) => {\n\n  const postTypeLabels =\n    postType === \"portfolio\"\n      ? { single: \"Project\", plural: \"Projects\", type: \"Project\" }\n      : { single: \"Blog\", plural: \"Blog\", type: \"Blog\" };\n\n\n  if (exclude != null && topTags.indexOf(exclude) > -1) { topTags.splice(topTags.indexOf(exclude), 1) }\n\n\n\n\n  return (\n    <div className=\"top-tags\">\n      <ul>\n      {back &&\n      <li className=\"more-tags\">\n        <Link to={`/${postType}`} style={{ margin: \"0 auto 0 0.5em\" }}>\n        <FontAwesomeIcon fixedWidth icon='arrow-left' />\n\n          Back to {postTypeLabels.plural}\n        </Link></li>}\n        {topTags && topTags.map((tag, i) => {\n          const tagLink = (tag === 'WordPress' ? `/${postType}/tags/wordpress/` :  `/${postType}/tags/${_.kebabCase(tag)}/`)\n          if (i < limit && tag !== exclude) {\n            return (\n              <li className=\"top-tag\" key={i}>\n                <Link to={tagLink}>\n                  <FontAwesomeIcon fixedWidth icon={tagIcons[tag]} />\n                                        {tag}\n                </Link>\n              </li>\n            )\n          } else {return null}\n        })}\n        <li className=\"more-tags\">\n\n          <Link to={`/${postType}/tags`}>\n            <FontAwesomeIcon fixedWidth icon='ellipsis-h' />\n            {postTypeLabels.single}&nbsp;Tags\n          </Link>\n        </li>\n      </ul>\n    </div>\n  )\n}\n\nexport default TopTags;","/**\n * PageTitle component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Drips from \"./atoms/drips\"\n\nconst PageTitle = ({ children, subtitle = \"\" }) => {\n\n  return (\n    <header className=\"page-title slim pink\" >\n      <Drips color=\"black\" slim/>\n\n      <h1>{children}</h1>\n      {subtitle && <h2>{subtitle}</h2>}\n    </header>\n  )\n}\n\nPageTitle.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default PageTitle\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport BlogCard from \"../components/blog/blogCard\"\nimport PageTitle from \"../components/pageTitle\"\nimport ProjectCard from \"../components/portfolio/projectCard\"\nimport TopTags from \"../components/common/topTags\"\nimport SEO from \"../components/seo\"\n\nclass TagRoute extends React.Component {\n  render() {\n    const posts = this.props.data.allMarkdownRemark.edges\n    const tag = this.props.pageContext.tag\n    const totalCount = this.props.data.allMarkdownRemark.totalCount\n    const postType = this.props.pageContext.postType\n\n    const postTypeLabels =\n      postType === \"portfolio\"\n        ? { single: \"Project\", plural: \"Projects\", type: \"Project\" }\n        : { single: \"Blog Post\", plural: \"Blog Posts\", type: \"Blog\" }\n\n    let topTags = this.props.pageContext.topTags\n    topTags = Object.keys(topTags).sort(function(a, b) {\n      return topTags[a] < topTags[b]\n    })\n\n    const tagHeader = <>{totalCount} {\n      totalCount === 1 ? postTypeLabels.single : postTypeLabels.plural\n    } Tagged {tag}</>\n\n    return (\n      <Layout>\n          <SEO title={`${tag} ${postTypeLabels.plural}`} />\n\n          <PageTitle>{tagHeader}</PageTitle>\n          <section className=\"slim black\">\n            <TopTags\n              topTags={topTags}\n              postType={postType}\n              back={true}\n              exclude={tag}\n              limit={5}\n            />\n          </section>\n          <main className=\"page_body page_body--grid\">\n            <div className={postType === \"blog\" ? \"blog-posts\" : \"projects\"}>\n              {posts\n                .filter(post => post.node.frontmatter.title.length > 0)\n                .map(({ node: post }, index) => {\n                  let ShowCard\n\n                  let card =\n                    postType === \"portfolio\" ? (\n                      <ProjectCard post={post} index={index} />\n                    ) : (\n                      <>\n                        <BlogCard\n                          post={post}\n                          index={index}\n                          large={(index + 1) % 5 === 0 || index === 0}\n                        />\n                        {ShowCard}\n                      </>\n                    )\n\n                  return <>{card}</>\n                })}\n\n            </div>\n          </main>\n      </Layout>\n    )\n  }\n}\n\nexport default TagRoute\n\nexport const tagPageQuery = graphql`\n  query SingleTagPage($tag: String, $postType: String) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      limit: 1000\n      sort: {\n        order: [DESC, DESC]\n        fields: [fields___weight, fields___date]\n      }\n      filter: {\n        frontmatter: { tags: { in: [$tag] } }\n        fields: {\n          published: { eq: true }\n          unlisted: { ne: true }\n          collection: { eq: $postType }\n        }\n      }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt(pruneLength: 250)\n          id\n          frontmatter {\n            title\n            subtitle\n            date(formatString: \"MMMM DD, YYYY\")\n            updated(formatString: \"MMMM DD, YYYY\")\n            published\n            description\n            featuredImage {\n              childImageSharp {\n                resize(width: 500, height: 500, cropFocus: CENTER) {\n                  src\n                }\n              }\n            }\n            logo {\n              publicURL\n            }\n            tags\n            color\n          }\n          fields {\n            slug\n            collection\n            externalLink\n            published\n            unlisted\n            weight\n            date(formatString: \"MMMM DD, YYYY\")\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["_","require","topTags","postType","back","exclude","limit","postTypeLabels","single","plural","type","indexOf","splice","className","Link","to","style","margin","fixedWidth","icon","map","tag","i","tagLink","kebabCase","key","tagIcons","children","subtitle","color","slim","TagRoute","render","posts","this","props","data","allMarkdownRemark","edges","pageContext","totalCount","Object","keys","sort","a","b","tagHeader","title","filter","post","node","frontmatter","length","index","card","large","ShowCard","React"],"sourceRoot":""}