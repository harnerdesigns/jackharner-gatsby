{"version":3,"file":"component---src-templates-tags-blog-tags-js-8534b90b093384147872.js","mappings":"kJA2BA,IAhBkBA,IAAkC,IAAjC,SAAEC,EAAQ,SAAEC,EAAW,IAAIF,EAE5C,OACEG,EAAAA,cAAA,UAAQC,UAAU,wBAChBD,EAAAA,cAACE,EAAAA,EAAK,CAACC,MAAM,QAAQC,MAAI,IAEzBJ,EAAAA,cAAA,UAAKF,GACJC,GAAYC,EAAAA,cAAA,UAAKD,GACX,C,4HCVb,MAAMM,EAAIC,EAAQ,MAAS,IAErBC,EAAQ,SAAAC,GAAA,SAAAD,IAAA,OAAAC,EAAAC,MAAA,KAAAC,YAAA,KAoEX,OApEWC,EAAAA,EAAAA,GAAAJ,EAAAC,GAAAD,EAAAK,UACZC,OAAA,WACE,MAAMC,EAAQC,KAAKC,MAAMC,KAAKC,kBAAkBC,MAC1CC,EAAOL,KAAKC,MAAMK,YAAYC,QAEpC,IAAIC,EAAaC,OAAOC,KAAKL,GAAMM,MAAK,SAAUC,EAAGC,GACnD,OAAOR,EAAKO,GAAKP,EAAKQ,EACxB,IAGA,OACE5B,EAAAA,cAAC6B,EAAAA,EAAM,KACL7B,EAAAA,cAAC8B,EAAAA,EAAG,CAACC,MAAM,cAEX/B,EAAAA,cAACgC,EAAAA,EAAS,KAAC,aAEXhC,EAAAA,cAAA,QAAMC,UAAU,6BACdD,EAAAA,cAAA,OAAKC,UAAU,YACZsB,EAAWU,KAAI,CAACC,EAAKC,KACpB,MAAMC,EAAmB,cAARF,EAAmB,sCAA2C7B,EAAEgC,UAAUH,GAAI,IAC/F,OACElC,EAAAA,cAACsC,EAAAA,KAAI,CAACC,GAAIH,EAASnC,UAAU,aAC3BD,EAAAA,cAACwC,EAAAA,EAAe,CAACC,YAAU,EAACC,KAAMC,EAAAA,EAAST,KAC3ClC,EAAAA,cAAA,UAAKkC,GACLlC,EAAAA,cAAA,UACGoB,EAAKc,GAAK,QAAMd,EAAKc,GAAO,EAAI,IAAM,IAEzClC,EAAAA,cAAA,OAAKC,UAAU,qBACZa,EACE8B,QAAO/C,IAAA,IAAGgD,KAAMC,GAAMjD,EAAA,QACrBiD,EAAKC,YAAY3B,MACb0B,EAAKC,YAAY3B,KAAK4B,SAASd,EAC1B,IAEVD,KAAI,CAAAgB,EAAiBC,KAAO,IAArBL,KAAMC,GAAMG,EAClB,OAAIC,EAAI,EAEJlD,EAAAA,cAAA,WAEEA,EAAAA,cAACmD,EAAAA,EAAW,CACVC,MACEN,EAAKC,YAAYM,cAAcC,gBAAgBC,gBAEjDC,IACEV,EAAKC,YAAYhB,MACjB,MACAe,EAAKC,YAAYhD,SAEnBgC,MACEe,EAAKC,YAAYhB,MACjB,MACAe,EAAKC,YAAYhD,YAMlB,EACT,KAGD,MAOrB,EAACQ,CAAA,CApEW,CAASP,EAAAA,WAuEvB,W","sources":["webpack://jackharner-gatsby/./src/components/pageTitle.js","webpack://jackharner-gatsby/./src/templates/tags/blog-tags.js"],"sourcesContent":["/**\n * PageTitle component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Drips from \"./atoms/drips\"\n\nconst PageTitle = ({ children, subtitle = \"\" }) => {\n\n  return (\n    <header className=\"page-title slim pink\" >\n      <Drips color=\"black\" slim/>\n\n      <h1>{children}</h1>\n      {subtitle && <h2>{subtitle}</h2>}\n    </header>\n  )\n}\n\nPageTitle.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default PageTitle\n","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport Layout from \"../../components/layout\"\nimport PageTitle from \"../../components/pageTitle\"\nimport SEO from \"../../components/seo\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport tagIcons from \"./tag-icons\"\nimport { GatsbyImage } from \"gatsby-plugin-image\"\n\nconst _ = require(\"lodash\")\n\nclass TagRoute extends React.Component {\n  render() {\n    const posts = this.props.data.allMarkdownRemark.edges\n    const tags = this.props.pageContext.topTags\n\n    var sortedTags = Object.keys(tags).sort(function (a, b) {\n      return tags[a] < tags[b]\n    })\n\n\n    return (\n      <Layout>\n        <SEO title=\"Blog Tags\" />\n\n        <PageTitle>Blog Tags</PageTitle>\n\n        <main className=\"page_body page_body--grid\">\n          <div className=\"tag-grid\">\n            {sortedTags.map((tag, index) => {\n              const tagLink = (tag === 'WordPress' ? `/blog/tags/wordpress/` : `/blog/tags/${_.kebabCase(tag)}/`)\n              return (\n                <Link to={tagLink} className=\"tag__card\">\n                  <FontAwesomeIcon fixedWidth icon={tagIcons[tag]} />\n                  <h3>{tag}</h3>\n                  <h4>\n                    {tags[tag]} Post{tags[tag] > 1 ? \"s\" : \"\"}\n                  </h4>\n                  <div className=\"tag__post-preview\">\n                    {posts\n                      .filter(({ node: post }) =>\n                        post.frontmatter.tags\n                          ? post.frontmatter.tags.includes(tag)\n                          : false\n                      )\n                      .map(({ node: post }, i) => {\n                        if (i < 4) {\n                          return (\n                            <div>\n\n                              <GatsbyImage\n                                image={\n                                  post.frontmatter.featuredImage.childImageSharp.gatsbyImageData\n                                }\n                                alt={\n                                  post.frontmatter.title +\n                                  \" | \" +\n                                  post.frontmatter.subtitle\n                                }\n                                title={\n                                  post.frontmatter.title +\n                                  \" | \" +\n                                  post.frontmatter.subtitle\n                                }\n                              />\n                            </div>\n                          )\n                        } else {\n                          return \"\"\n                        }\n                      })}\n                  </div>\n                </Link>\n              )\n            })}\n          </div>\n        </main>\n      </Layout>\n    )\n  }\n}\n\nexport default TagRoute\n\nexport const tagPageQuery = graphql`query TagsPage {\n  site {\n    siteMetadata {\n      title\n    }\n  }\n  allMarkdownRemark(\n    limit: 1000\n    sort: {frontmatter: {date: DESC}}\n    filter: {fields: {published: {eq: true}, unlisted: {eq: false}, collection: {eq: \"blog\"}}}\n  ) {\n    totalCount\n    edges {\n      node {\n        id\n        frontmatter {\n          tags\n          title\n          subtitle\n          featuredImage {\n            childImageSharp {\n              gatsbyImageData(layout: CONSTRAINED, width: 100, height: 100, transformOptions: {fit: COVER})\n            }\n          }\n        }\n        fields {\n          published\n          unlisted\n        }\n      }\n    }\n  }\n}`\n"],"names":["_ref","children","subtitle","React","className","Drips","color","slim","_","require","TagRoute","_React$Component","apply","arguments","_inheritsLoose","prototype","render","posts","this","props","data","allMarkdownRemark","edges","tags","pageContext","topTags","sortedTags","Object","keys","sort","a","b","Layout","SEO","title","PageTitle","map","tag","index","tagLink","kebabCase","Link","to","FontAwesomeIcon","fixedWidth","icon","tagIcons","filter","node","post","frontmatter","includes","_ref2","i","GatsbyImage","image","featuredImage","childImageSharp","gatsbyImageData","alt"],"sourceRoot":""}